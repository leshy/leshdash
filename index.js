// Generated by LiveScript 1.4.0
(function(){
  var _, slice$ = [].slice;
  _ = require('lodash');
  exports.jsonQuery = function(path, object){
    if (path.constructor === String) {
      path = path.split('.');
    }
    if (!path.length) {
      return object;
    } else {
      return exports.jsonQuery(_.tail(path), object[_.head(path)]);
    }
  };
  exports.lazy = function(f){
    var res;
    res = {};
    return function(){
      var args;
      args = slice$.call(arguments);
      if (res.promise) {
        return res.promise;
      } else {
        return res.promise = f.apply(this, args);
      }
    };
  };
  exports.jsonError = function(error){
    var serializeError;
    serializeError = function(error){
      return {
        stack: error.stack,
        name: error.name,
        message: error.message
      };
    };
    switch (error.constructor) {
    case Error:
      return serializeError(error);
    default:
      return {
        name: error.constructor.name,
        message: String(error)
      };
    }
  };
  partialize$.apply(_, [_.assign, [exports, void 8], [1]]);
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL3Jlc2JvdS9jb3JlL25vZGVfbW9kdWxlcy9sZXNoZGFzaC9pbmRleC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFFbUIsQ0FBUixDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQTtFQUVYLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQTtJQUNsQixJQUFHLElBQUksQ0FBQSxXQUFHLENBQUEsR0FBQSxDQUFHLE1BQWI7TUFBeUIsSUFBSyxDQUFBLENBQUEsQ0FBRSxJQUFJLENBQUMsTUFBTSxHQUFEOztJQUUxQyxJQUFHLENBQUksSUFBSSxDQUFDLE1BQVo7TUFBd0IsTUFBQSxDQUFPLE1BQVA7S0FDeEI7YUFBSyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxJQUFELEdBQVEsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFILENBQVEsSUFBQSxDQUFSLENBQXBCOzs7RUFHekIsT0FBTyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLENBQUE7O0lBQ1QsR0FBSSxDQUFBLENBQUEsQ0FBRTtXQUNOLFFBQUEsQ0FBQTs7TUFBSTtNQUNGLElBQUcsR0FBRyxDQUFDLE9BQVA7ZUFBb0IsR0FBRyxDQUFDO09BQ3hCO2VBQUssR0FBRyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQyxDQUFDLE1BQU0sTUFBRyxJQUFIOzs7O0VBSW5DLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxLQUFBOztJQUNoQixjQUFlLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxLQUFBO2FBQ2Y7UUFBQSxPQUFPLEtBQUssQ0FBQztRQUNiLE1BQU0sS0FBSyxDQUFDO1FBQ1osU0FBUyxLQUFLLENBQUM7TUFGZjs7SUFJRixRQUFPLEtBQUssQ0FBQyxXQUFiO0FBQUEsSUFDSSxLQUFBLEtBQUE7QUFBQSxhQUFTLGVBQWUsS0FBQTs7YUFDWDtRQUFFLE1BQU0sS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUFNLFNBQVMsT0FBTyxLQUFEO01BQS9DOzs7b0JBR3JCLElBQUEsQ0FBQyxDQUFDLFNBQU8iLCJzb3VyY2VzQ29udGVudCI6WyIjIGF1dG9jb21waWxlXG5cbnJlcXVpcmUhIHsgbG9kYXNoOiBfIH1cblxuZXhwb3J0cy5qc29uUXVlcnkgPSAocGF0aCwgb2JqZWN0KSAtPiBcbiAgaWYgcGF0aEBAIGlzIFN0cmluZyB0aGVuIHBhdGggPSBwYXRoLnNwbGl0KCcuJylcblxuICBpZiBub3QgcGF0aC5sZW5ndGggdGhlbiByZXR1cm4gb2JqZWN0XG4gIGVsc2UgZXhwb3J0cy5qc29uUXVlcnkgXy50YWlsKHBhdGgpLCBvYmplY3RbXy5oZWFkIHBhdGhdXG4gICAgICBcblxuZXhwb3J0cy5sYXp5ID0gKGYpIC0+XG4gICAgICByZXMgPSB7fVxuICAgICAgKC4uLmFyZ3MpIC0+XG4gICAgICAgIGlmIHJlcy5wcm9taXNlIHRoZW4gcmVzLnByb21pc2VcbiAgICAgICAgZWxzZSByZXMucHJvbWlzZSA9IGYuYXBwbHkgQCwgYXJnc1xuXG5cblxuZXhwb3J0cy5qc29uRXJyb3IgPSAoZXJyb3IpIC0+XG4gICAgc2VyaWFsaXplRXJyb3IgPSAoZXJyb3IpIC0+IGRvXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2tcbiAgICAgIG5hbWU6IGVycm9yLm5hbWVcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgICBcbiAgICBzd2l0Y2ggZXJyb3IuY29uc3RydWN0b3JcbiAgICAgIHwgRXJyb3IgPT4gc2VyaWFsaXplRXJyb3IgZXJyb3JcbiAgICAgIHwgb3RoZXJ3aXNlID0+IHsgbmFtZTogZXJyb3IuY29uc3RydWN0b3IubmFtZSwgbWVzc2FnZTogU3RyaW5nKGVycm9yKSB9XG5cblxuXy5hc3NpZ24gZXhwb3J0cywgX1xuIl19
