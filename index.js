// Generated by LiveScript 1.4.0
(function(){
  var lodash, lib, slice$ = [].slice;
  lodash = require('lodash');
  lib = {};
  lib.jsonQuery = function(path, object){
    if (path.constructor === String) {
      path = path.split('.');
    }
    if (!path.length) {
      return object;
    } else {
      return lib.jsonQuery(lodash.tail(path), object[lodash.head(path)]);
    }
  };
  lib.lazy = function(f){
    var res;
    res = {};
    return function(){
      var args;
      args = slice$.call(arguments);
      if (res.promise) {
        return res.promise;
      } else {
        return res.promise = f.apply(this, args);
      }
    };
  };
  lib.jsonError = function(error){
    var serializeError;
    serializeError = function(error){
      return {
        stack: error.stack,
        name: error.name,
        message: error.message
      };
    };
    switch (error.constructor) {
    case Error:
      return serializeError(error);
    default:
      return {
        name: error.constructor.name,
        message: String(error)
      };
    }
  };
  module.exports = lodash.assign(lib, lodash);
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL3Jlc2JvdS9jb3JlL25vZGVfbW9kdWxlcy9sZXNoZGFzaC9pbmRleC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFFVyxNQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBO0VBRVgsR0FBSSxDQUFBLENBQUEsQ0FBRTtFQUVOLEdBQUcsQ0FBQyxTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQTtJQUNkLElBQUcsSUFBSSxDQUFBLFdBQUcsQ0FBQSxHQUFBLENBQUcsTUFBYjtNQUF5QixJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxNQUFNLEdBQUQ7O0lBRTFDLElBQUcsQ0FBSSxJQUFJLENBQUMsTUFBWjtNQUF3QixNQUFBLENBQU8sTUFBUDtLQUN4QjthQUFLLEdBQUcsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxLQUFLLElBQUQsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQVIsQ0FBYSxJQUFBLENBQWIsQ0FBekI7OztFQUdyQixHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsQ0FBQTs7SUFDTCxHQUFJLENBQUEsQ0FBQSxDQUFFO1dBQ04sUUFBQSxDQUFBOztNQUFJO01BQ0YsSUFBRyxHQUFHLENBQUMsT0FBUDtlQUFvQixHQUFHLENBQUM7T0FDeEI7ZUFBSyxHQUFHLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUMsTUFBTSxNQUFHLElBQUg7Ozs7RUFJbkMsR0FBRyxDQUFDLFNBQVUsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLEtBQUE7O0lBQ1osY0FBZSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsS0FBQTthQUNmO1FBQUEsT0FBTyxLQUFLLENBQUM7UUFDYixNQUFNLEtBQUssQ0FBQztRQUNaLFNBQVMsS0FBSyxDQUFDO01BRmY7O0lBSUYsUUFBTyxLQUFLLENBQUMsV0FBYjtBQUFBLElBQ0ksS0FBQSxLQUFBO0FBQUEsYUFBUyxlQUFlLEtBQUE7O2FBQ1g7UUFBRSxNQUFNLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFBTSxTQUFTLE9BQU8sS0FBRDtNQUEvQzs7O0VBSXJCLE1BQU0sQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxPQUFPLEtBQUssTUFBTCIsInNvdXJjZXNDb250ZW50IjpbIiMgYXV0b2NvbXBpbGVcblxucmVxdWlyZSEgeyBsb2Rhc2ggfVxuXG5saWIgPSB7fVxuXG5saWIuanNvblF1ZXJ5ID0gKHBhdGgsIG9iamVjdCkgLT4gXG4gIGlmIHBhdGhAQCBpcyBTdHJpbmcgdGhlbiBwYXRoID0gcGF0aC5zcGxpdCgnLicpXG5cbiAgaWYgbm90IHBhdGgubGVuZ3RoIHRoZW4gcmV0dXJuIG9iamVjdFxuICBlbHNlIGxpYi5qc29uUXVlcnkgbG9kYXNoLnRhaWwocGF0aCksIG9iamVjdFtsb2Rhc2guaGVhZCBwYXRoXVxuICAgICAgXG5cbmxpYi5sYXp5ID0gKGYpIC0+XG4gICAgICByZXMgPSB7fVxuICAgICAgKC4uLmFyZ3MpIC0+XG4gICAgICAgIGlmIHJlcy5wcm9taXNlIHRoZW4gcmVzLnByb21pc2VcbiAgICAgICAgZWxzZSByZXMucHJvbWlzZSA9IGYuYXBwbHkgQCwgYXJnc1xuXG5cblxubGliLmpzb25FcnJvciA9IChlcnJvcikgLT5cbiAgICBzZXJpYWxpemVFcnJvciA9IChlcnJvcikgLT4gZG9cbiAgICAgIHN0YWNrOiBlcnJvci5zdGFja1xuICAgICAgbmFtZTogZXJyb3IubmFtZVxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgIFxuICAgIHN3aXRjaCBlcnJvci5jb25zdHJ1Y3RvclxuICAgICAgfCBFcnJvciA9PiBzZXJpYWxpemVFcnJvciBlcnJvclxuICAgICAgfCBvdGhlcndpc2UgPT4geyBuYW1lOiBlcnJvci5jb25zdHJ1Y3Rvci5uYW1lLCBtZXNzYWdlOiBTdHJpbmcoZXJyb3IpIH1cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gbG9kYXNoLmFzc2lnbiBsaWIsIGxvZGFzaFxuXG4iXX0=
