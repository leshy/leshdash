// Generated by LiveScript 1.4.0
(function(){
  var lodash, lib, abstractPad, slice$ = [].slice;
  lodash = require('lodash');
  lib = {};
  lib.jsonQuery = function(path, object, seperator){
    seperator == null && (seperator = "_");
    if (path.constructor === String) {
      path = path.split(seperator);
    }
    if (!path.length) {
      return object;
    } else {
      return lib.jsonQuery(lodash.tail(path), object[lodash.head(path)]);
    }
  };
  lib.jsonError = function(error){
    var serializeError;
    serializeError = function(error){
      return {
        stack: error.stack,
        name: error.name,
        message: error.message
      };
    };
    switch (error.constructor) {
    case Error:
      return serializeError(error);
    default:
      return {
        name: error.constructor.name,
        message: String(error)
      };
    }
  };
  lib.wait = function(t, f){
    return setTimeout(f, t);
  };
  lib.lazy = function(f){
    var res;
    res = {};
    return function(){
      var args;
      args = slice$.call(arguments);
      if (res.promise) {
        return res.promise;
      } else {
        return res.promise = f.apply(this, args);
      }
    };
  };
  lib.abstractPad = abstractPad = function(operation, success, text){
    var modifyText;
    if (text == null) {
      text = "";
    }
    if (text.constructor !== String) {
      text = String(text);
    }
    modifyText = function(text){
      if (success(text)) {
        return text;
      } else {
        return modifyText(operation(text));
      }
    };
    return modifyText(text);
  };
  lib.pad = function(text, length, chr){
    chr == null && (chr = 0);
    return abstractPad(function(text){
      return chr + text;
    }, function(text){
      return text.length >= length;
    }, text);
  };
  lib.rpad = function(text, length, chr){
    chr == null && (chr = 0);
    return abstractPad(function(text){
      return text + chr;
    }, function(text){
      return text.length >= length;
    }, text);
  };
  lib.antipad = function(text, chr){
    chr == null && (chr = "0");
    return abstractPad(function(text){
      return text.slice(0, text.length - 1);
    }, function(text){
      return text[text.length - 1] === chr;
    }, text);
  };
  module.exports = lodash.assign(lib, lodash);
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL3Jlc2JvdS9jb3JlL25vZGVfbW9kdWxlcy9sZXNoZGFzaC9pbmRleC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFFVyxNQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBO0VBRVgsR0FBSSxDQUFBLENBQUEsQ0FBRTtFQUVOLEdBQUcsQ0FBQyxTQUFVLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUE7SUFBZSxzQkFBQSxZQUFhO0lBQzFDLElBQUcsSUFBSSxDQUFBLFdBQUcsQ0FBQSxHQUFBLENBQUcsTUFBYjtNQUF5QixJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxNQUFNLFNBQUE7O0lBRTNDLElBQUcsQ0FBSSxJQUFJLENBQUMsTUFBWjtNQUF3QixNQUFBLENBQU8sTUFBUDtLQUN4QjthQUFLLEdBQUcsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxLQUFLLElBQUQsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQVIsQ0FBYSxJQUFBLENBQWIsQ0FBekI7OztFQUdyQixHQUFHLENBQUMsU0FBVSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsS0FBQTs7SUFDWixjQUFlLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxLQUFBO2FBQ2Y7UUFBQSxPQUFPLEtBQUssQ0FBQztRQUNiLE1BQU0sS0FBSyxDQUFDO1FBQ1osU0FBUyxLQUFLLENBQUM7TUFGZjs7SUFJRixRQUFPLEtBQUssQ0FBQyxXQUFiO0FBQUEsSUFDSSxLQUFBLEtBQUE7QUFBQSxhQUFTLGVBQWUsS0FBQTs7YUFDWDtRQUFFLE1BQU0sS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUFNLFNBQVMsT0FBTyxLQUFEO01BQS9DOzs7RUFFckIsR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBO1dBQVUsV0FBVyxHQUFHLENBQUg7O0VBRWhDLEdBQUcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxDQUFBOztJQUNMLEdBQUksQ0FBQSxDQUFBLENBQUU7V0FDTixRQUFBLENBQUE7O01BQUk7TUFDRixJQUFHLEdBQUcsQ0FBQyxPQUFQO2VBQW9CLEdBQUcsQ0FBQztPQUN4QjtlQUFLLEdBQUcsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBQyxNQUFNLE1BQUcsSUFBSDs7OztFQUVuQyxHQUFHLENBQUMsV0FBWSxDQUFBLENBQUEsQ0FBRSxXQUFZLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxTQUFBLEVBQUEsT0FBQSxFQUFBLElBQUE7O0lBQzVCLElBQU8sSUFBSixRQUFIO01BQWtCLElBQUssQ0FBQSxDQUFBLENBQUU7O0lBQ3pCLElBQUcsSUFBSSxDQUFDLFdBQVksQ0FBQSxHQUFBLENBQUssTUFBekI7TUFBcUMsSUFBSyxDQUFBLENBQUEsQ0FBRSxPQUFPLElBQUE7O0lBRW5ELFVBQVcsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLElBQUE7TUFDVCxJQUFHLE9BQUgsQ0FBVyxJQUFELENBQVY7UUFBc0IsTUFBQSxDQUFPLElBQVA7T0FDdEI7ZUFBSyxXQUFXLFVBQVUsSUFBQSxDQUFWOzs7V0FFcEIsV0FBVyxJQUFBOztFQUVmLEdBQUcsQ0FBQyxHQUFJLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7SUFBYSxnQkFBQSxNQUFJO1dBQ3ZCLFlBQ0ssUUFBQSxDQUFBLElBQUE7YUFBVSxHQUFJLENBQUEsQ0FBQSxDQUFFO09BQ2hCLFFBQUEsQ0FBQSxJQUFBO2FBQVUsSUFBSSxDQUFDLE1BQU8sQ0FBQSxFQUFBLENBQUc7T0FDMUIsSUFITzs7RUFLZixHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBO0lBQWEsZ0JBQUEsTUFBSTtXQUN4QixZQUNLLFFBQUEsQ0FBQSxJQUFBO2FBQVUsSUFBSyxDQUFBLENBQUEsQ0FBRTtPQUNqQixRQUFBLENBQUEsSUFBQTthQUFVLElBQUksQ0FBQyxNQUFPLENBQUEsRUFBQSxDQUFHO09BQzFCLElBSE87O0VBS2YsR0FBRyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLElBQUEsRUFBQSxHQUFBO0lBQU0sZ0JBQUEsTUFBTztXQUN2QixZQUNLLFFBQUEsQ0FBQSxJQUFBO2FBQVUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTyxDQUFBLENBQUEsQ0FBRSxDQUFsQjtPQUNwQixRQUFBLENBQUEsSUFBQTthQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTyxDQUFBLENBQUEsQ0FBRSxDQUFmLENBQWtCLENBQUEsR0FBQSxDQUFHO09BQ3BDLElBSE87O0VBTWYsTUFBTSxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQUUsTUFBTSxDQUFDLE9BQU8sS0FBSyxNQUFMIiwic291cmNlc0NvbnRlbnQiOlsiIyBhdXRvY29tcGlsZVxuXG5yZXF1aXJlISB7IGxvZGFzaCB9XG5cbmxpYiA9IHt9XG5cbmxpYi5qc29uUXVlcnkgPSAocGF0aCwgb2JqZWN0LCBzZXBlcmF0b3I9XCJfXCIpIC0+IFxuICBpZiBwYXRoQEAgaXMgU3RyaW5nIHRoZW4gcGF0aCA9IHBhdGguc3BsaXQgc2VwZXJhdG9yXG5cbiAgaWYgbm90IHBhdGgubGVuZ3RoIHRoZW4gcmV0dXJuIG9iamVjdFxuICBlbHNlIGxpYi5qc29uUXVlcnkgbG9kYXNoLnRhaWwocGF0aCksIG9iamVjdFtsb2Rhc2guaGVhZCBwYXRoXVxuICAgICAgXG5cbmxpYi5qc29uRXJyb3IgPSAoZXJyb3IpIC0+XG4gICAgc2VyaWFsaXplRXJyb3IgPSAoZXJyb3IpIC0+IGRvXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2tcbiAgICAgIG5hbWU6IGVycm9yLm5hbWVcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgICBcbiAgICBzd2l0Y2ggZXJyb3IuY29uc3RydWN0b3JcbiAgICAgIHwgRXJyb3IgPT4gc2VyaWFsaXplRXJyb3IgZXJyb3JcbiAgICAgIHwgb3RoZXJ3aXNlID0+IHsgbmFtZTogZXJyb3IuY29uc3RydWN0b3IubmFtZSwgbWVzc2FnZTogU3RyaW5nKGVycm9yKSB9XG5cbmxpYi53YWl0ID0gKHQsIGYpIC0+IHNldFRpbWVvdXQgZiwgdFxuXG5saWIubGF6eSA9IChmKSAtPlxuICAgICAgcmVzID0ge31cbiAgICAgICguLi5hcmdzKSAtPlxuICAgICAgICBpZiByZXMucHJvbWlzZSB0aGVuIHJlcy5wcm9taXNlXG4gICAgICAgIGVsc2UgcmVzLnByb21pc2UgPSBmLmFwcGx5IEAsIGFyZ3NcblxubGliLmFic3RyYWN0UGFkID0gYWJzdHJhY3RQYWQgPSAob3BlcmF0aW9uLCBzdWNjZXNzLCB0ZXh0KSAtPlxuICAgIGlmIG5vdCB0ZXh0PyB0aGVuIHRleHQgPSBcIlwiXG4gICAgaWYgdGV4dC5jb25zdHJ1Y3RvciBpc250IFN0cmluZyB0aGVuIHRleHQgPSBTdHJpbmcgdGV4dFxuXG4gICAgbW9kaWZ5VGV4dCA9ICh0ZXh0KSAtPlxuICAgICAgICBpZiBzdWNjZXNzKHRleHQpIHRoZW4gcmV0dXJuIHRleHRcbiAgICAgICAgZWxzZSBtb2RpZnlUZXh0IG9wZXJhdGlvbiB0ZXh0XG5cbiAgICBtb2RpZnlUZXh0IHRleHRcblxubGliLnBhZCA9ICh0ZXh0LGxlbmd0aCxjaHI9MCkgLT5cbiAgICBhYnN0cmFjdFBhZChcbiAgICAgICAgKCh0ZXh0KSAtPiBjaHIgKyB0ZXh0KSxcbiAgICAgICAgKCh0ZXh0KSAtPiB0ZXh0Lmxlbmd0aCA+PSBsZW5ndGgpLFxuICAgICAgICB0ZXh0KVxuXG5saWIucnBhZCA9ICh0ZXh0LGxlbmd0aCxjaHI9MCkgLT5cbiAgICBhYnN0cmFjdFBhZChcbiAgICAgICAgKCh0ZXh0KSAtPiB0ZXh0ICsgY2hyKSxcbiAgICAgICAgKCh0ZXh0KSAtPiB0ZXh0Lmxlbmd0aCA+PSBsZW5ndGgpLFxuICAgICAgICB0ZXh0KVxuXG5saWIuYW50aXBhZCA9ICh0ZXh0LGNocj1cIjBcIikgLT5cbiAgICBhYnN0cmFjdFBhZChcbiAgICAgICAgKCh0ZXh0KSAtPiB0ZXh0LnNsaWNlKDAsIHRleHQubGVuZ3RoIC0gMSkpLFxuICAgICAgICAoKHRleHQpIC0+IHRleHRbdGV4dC5sZW5ndGggLSAxXSBpcyBjaHIpLFxuICAgICAgICB0ZXh0KVxuXG5cbm1vZHVsZS5leHBvcnRzID0gbG9kYXNoLmFzc2lnbiBsaWIsIGxvZGFzaFxuIl19
