(function(){
  var lodash, assign, p, lib, abstractPad, dChars, slice$ = [].slice;
  lodash = require('lodash'), assign = lodash.assign;
  p = require('bluebird');
  lib = assign(require('./curried'), require('./promise'), {
    w: require('./wrap')
  });
  lib.jsonQuery = function(path, object, seperator){
    var deeperObject;
    seperator == null && (seperator = "_");
    if (path.constructor === String) {
      path = path.split(seperator);
    }
    if (!path.length) {
      return object;
    } else {
      if (!(deeperObject = object[lodash.head(path)])) {} else {
        return lib.jsonQuery(lodash.tail(path), deeperObject);
      }
    }
  };
  lib.jsonError = function(error){
    var serializeError;
    serializeError = function(error){
      return {
        stack: error.stack,
        name: error.name,
        message: error.message
      };
    };
    switch (error.constructor) {
    case Error:
      return serializeError(error);
    default:
      return {
        name: error.constructor.name,
        message: String(error)
      };
    }
  };
  lib.wait = function(t, f){
    return setTimeout(f, t);
  };
  lib.waitCancel = function(t, f){
    var id;
    id = lib.wait(t, f);
    return function(){
      return clearTimeout(id);
    };
  };
  lib.abstractPad = abstractPad = function(operation, success, text){
    var modifyText;
    if (text == null) {
      text = "";
    }
    if (text.constructor !== String) {
      text = String(text);
    }
    modifyText = function(text){
      if (success(text)) {
        return text;
      } else {
        return modifyText(operation(text));
      }
    };
    return modifyText(text);
  };
  lib.pad = function(text, length, chr){
    chr == null && (chr = 0);
    return abstractPad(function(text){
      return chr + text;
    }, function(text){
      return text.length >= length;
    }, text);
  };
  lib.rpad = function(text, length, chr){
    chr == null && (chr = 0);
    return abstractPad(function(text){
      return text + chr;
    }, function(text){
      return text.length >= length;
    }, text);
  };
  lib.antipad = function(text, chr){
    chr == null && (chr = "0");
    return abstractPad(function(text){
      return text.slice(0, text.length - 1);
    }, function(text){
      return text[text.length - 1] === chr;
    }, text);
  };
  lib.push = function(array){
    var stuff;
    stuff = slice$.call(arguments, 1);
    return array.concat(stuff);
  };
  lib.pop = function(object, key){
    var ret;
    ret = object[key];
    delete object.key;
    return ret;
  };
  dChars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  lib.token = function(targetLen, chars){
    var ret;
    targetLen == null && (targetLen = 25);
    chars == null && (chars = dChars);
    ret = [];
    while (ret.length < targetLen) {
      ret.push(lodash.sample(chars));
    }
    return ret.join('');
  };
  lib.identity = function(it){
    return it;
  };
  module.exports = lodash.assign(lib, lodash);
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL3Jlc2JvdS9yZWR1eC1tZXRhL25vZGVfbW9kdWxlcy9sZXNoZGFzaC9pbmRleC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztFQUVFLE1BQUEsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLEVBQVUsTUFBVixDQUFBLENBQUEsQ0FBQSxNQUFBLENBQVU7RUFDQSxDQUFWLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBO0VBR0YsR0FBSSxDQUFBLENBQUEsQ0FBRSxPQUNKLFFBQVEsV0FBQSxHQUNSLFFBQVEsV0FBQSxHQUNSO0lBQUEsR0FBRyxRQUFRLFFBQUE7RUFBWCxDQUZBO0VBSUYsR0FBRyxDQUFDLFNBQVUsQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQTs7SUFBZSxzQkFBQSxZQUFhO0lBQzFDLElBQUcsSUFBSSxDQUFBLFdBQUcsQ0FBQSxHQUFBLENBQUcsTUFBYjtNQUF5QixJQUFLLENBQUEsQ0FBQSxDQUFFLElBQUksQ0FBQyxNQUFNLFNBQUE7O0lBRTNDLElBQUcsQ0FBSSxJQUFJLENBQUMsTUFBWjtNQUF3QixNQUFBLENBQU8sTUFBUDtLQUN4QjtNQUNFLElBQUcsQ0FBQSxDQUFJLFlBQWEsQ0FBQSxDQUFBLENBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFSLENBQWEsSUFBQSxDQUFiLENBQXpCLENBQUgsSUFDQTtlQUFLLEdBQUcsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxLQUFLLElBQUQsR0FBUSxZQUFuQjs7OztFQUd2QixHQUFHLENBQUMsU0FBVSxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsS0FBQTs7SUFDWixjQUFlLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxLQUFBO2FBQ2Y7UUFBQSxPQUFPLEtBQUssQ0FBQztRQUNiLE1BQU0sS0FBSyxDQUFDO1FBQ1osU0FBUyxLQUFLLENBQUM7TUFGZjs7SUFJRixRQUFPLEtBQUssQ0FBQyxXQUFiO0FBQUEs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LENBQUMsS0FBSyxNQUFNLENBQUMsT0FBTyxLQUFBLENBQWQ7O1dBQ1gsR0FBRyxDQUFDLEtBQUssRUFBQTs7RUFFWCxHQUFHLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsRUFBQTtXQUFHOztFQUVsQixNQUFNLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBRSxNQUFNLENBQUMsT0FBTyxLQUFLLE1BQUwiLCJzb3VyY2VzQ29udGVudCI6WyIjIGF1dG9jb21waWxlXG5yZXF1aXJlISB7XG4gIGxvZGFzaDogeyBhc3NpZ24gfTpsb2Rhc2hcbiAgYmx1ZWJpcmQ6IHBcbn1cblxubGliID0gYXNzaWduIGRvXG4gIHJlcXVpcmUgJy4vY3VycmllZCdcbiAgcmVxdWlyZSAnLi9wcm9taXNlJ1xuICB3OiByZXF1aXJlICcuL3dyYXAnXG4gIFxubGliLmpzb25RdWVyeSA9IChwYXRoLCBvYmplY3QsIHNlcGVyYXRvcj1cIl9cIikgLT4gXG4gIGlmIHBhdGhAQCBpcyBTdHJpbmcgdGhlbiBwYXRoID0gcGF0aC5zcGxpdCBzZXBlcmF0b3JcbiAgICBcbiAgaWYgbm90IHBhdGgubGVuZ3RoIHRoZW4gcmV0dXJuIG9iamVjdFxuICBlbHNlXG4gICAgaWYgbm90IGRlZXBlck9iamVjdCA9IG9iamVjdFtsb2Rhc2guaGVhZCBwYXRoXSB0aGVuIHJldHVybiB2b2lkXG4gICAgZWxzZSBsaWIuanNvblF1ZXJ5IGxvZGFzaC50YWlsKHBhdGgpLCBkZWVwZXJPYmplY3RcbiAgICAgIFxuXG5saWIuanNvbkVycm9yID0gKGVycm9yKSAtPlxuICAgIHNlcmlhbGl6ZUVycm9yID0gKGVycm9yKSAtPiBkb1xuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrXG4gICAgICBuYW1lOiBlcnJvci5uYW1lXG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgXG4gICAgc3dpdGNoIGVycm9yLmNvbnN0cnVjdG9yXG4gICAgICB8IEVycm9yID0+IHNlcmlhbGl6ZUVycm9yIGVycm9yXG4gICAgICB8IG90aGVyd2lzZSA9PiB7IG5hbWU6IGVycm9yLmNvbnN0cnVjdG9yLm5hbWUsIG1lc3NhZ2U6IFN0cmluZyhlcnJvcikgfVxuXG5saWIud2FpdCA9ICh0LCBmKSAtPiBzZXRUaW1lb3V0IGYsIHRcblxubGliLndhaXRDYW5jZWwgPSAodCwgZikgLT5cbiAgaWQgPSBsaWIud2FpdCB0LCBmXG4gIC0+IGNsZWFyVGltZW91dCBpZFxuXG5saWIuYWJzdHJhY3RQYWQgPSBhYnN0cmFjdFBhZCA9IChvcGVyYXRpb24sIHN1Y2Nlc3MsIHRleHQpIC0+XG4gICAgaWYgbm90IHRleHQ/IHRoZW4gdGV4dCA9IFwiXCJcbiAgICBpZiB0ZXh0LmNvbnN0cnVjdG9yIGlzbnQgU3RyaW5nIHRoZW4gdGV4dCA9IFN0cmluZyB0ZXh0XG5cbiAgICBtb2RpZnlUZXh0ID0gKHRleHQpIC0+XG4gICAgICAgIGlmIHN1Y2Nlc3ModGV4dCkgdGhlbiByZXR1cm4gdGV4dFxuICAgICAgICBlbHNlIG1vZGlmeVRleHQgb3BlcmF0aW9uIHRleHRcblxuICAgIG1vZGlmeVRleHQgdGV4dFxuXG5saWIucGFkID0gKHRleHQsbGVuZ3RoLGNocj0wKSAtPlxuICAgIGFic3RyYWN0UGFkKFxuICAgICAgICAoKHRleHQpIC0+IGNociArIHRleHQpLFxuICAgICAgICAoKHRleHQpIC0+IHRleHQubGVuZ3RoID49IGxlbmd0aCksXG4gICAgICAgIHRleHQpXG5cbmxpYi5ycGFkID0gKHRleHQsbGVuZ3RoLGNocj0wKSAtPlxuICAgIGFic3RyYWN0UGFkKFxuICAgICAgICAoKHRleHQpIC0+IHRleHQgKyBjaHIpLFxuICAgICAgICAoKHRleHQpIC0+IHRleHQubGVuZ3RoID49IGxlbmd0aCksXG4gICAgICAgIHRleHQpXG5cbmxpYi5hbnRpcGFkID0gKHRleHQsY2hyPVwiMFwiKSAtPlxuICAgIGFic3RyYWN0UGFkKFxuICAgICAgICAoKHRleHQpIC0+IHRleHQuc2xpY2UoMCwgdGV4dC5sZW5ndGggLSAxKSksXG4gICAgICAgICgodGV4dCkgLT4gdGV4dFt0ZXh0Lmxlbmd0aCAtIDFdIGlzIGNociksXG4gICAgICAgIHRleHQpXG5cbiMgaW1tdXRhYmxlIHB1c2hcbmxpYi5wdXNoID0gKGFycmF5LCAuLi5zdHVmZikgLT4gYXJyYXkuY29uY2F0IHN0dWZmICBcblxubGliLnBvcCA9IChvYmplY3QsIGtleSkgLT5cbiAgcmV0ID0gb2JqZWN0W2tleV1cbiAgZGVsZXRlIG9iamVjdC5rZXlcbiAgcmV0XG5cbmRDaGFycyA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicuc3BsaXQgJydcblxubGliLnRva2VuID0gKHRhcmdldExlbj0yNSwgY2hhcnM9ZENoYXJzKSAtPlxuICByZXQgPSBbXVxuICB3aGlsZSByZXQubGVuZ3RoIDwgdGFyZ2V0TGVuXG4gICAgcmV0LnB1c2ggbG9kYXNoLnNhbXBsZSBjaGFyc1xuICByZXQuam9pbiAnJ1xuXG5saWIuaWRlbnRpdHkgPSAtPiBpdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaC5hc3NpZ24gbGliLCBsb2Rhc2hcbiJdfQ==
